# Author: P3TERX (Modified and Optimized)
#=================================================
name: üíª Build OpenWrt (x86_64)
# ============================================
# Ëß¶ÂèëÊù°‰ª∂
# ============================================
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      openclash:
        description: "‚ö° OpenClash"
        type: boolean
        default: true
      use_cache:
        description: "üíæ ‰ΩøÁî®ÁºìÂ≠òÂä†ÈÄü"
        type: boolean
        default: true
      debug_mode:
        description: "üêõ Ë∞ÉËØïÊ®°Âºè"
        type: boolean
        default: false
      parallel_jobs:
        description: "üî¢ Âπ∂Ë°å‰ªªÂä°Êï∞ (0=Ëá™Âä®)"
        type: string
        default: "0"
      force_clean:
        description: "üßπ Âº∫Âà∂Ê∏ÖÁêÜÁºìÂ≠ò"
        type: boolean
        default: false
# ============================================
# ÂÖ®Â±ÄÁéØÂ¢ÉÂèòÈáè
# ============================================
env:
  # Ê∫êÁ†Å‰ªìÂ∫ì
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  
  # ÈÖçÁΩÆÊñá‰ª∂
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  
  # ÁºñËØëËÆæÁΩÆ
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  
  # Á≥ªÁªüËÆæÁΩÆ
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
# ============================================
# Âπ∂ÂèëÊéßÂà∂
# ============================================
concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false
# ============================================
# ‰∏ª‰ªªÂä°
# ============================================
jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    
    steps:
      # ============================================
      # 1. ÂàùÂßãÂåñ
      # ============================================
      - name: üîß Setup Environment
        id: env
        run: |
          # Êó∂Âå∫ËÆæÁΩÆ
          sudo timedatectl set-timezone "$TZ"
          
          # Git ÈÖçÁΩÆ
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # ÁîüÊàêÊûÑÂª∫‰ø°ÊÅØ
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          TAG_TIME=$(date +'%Y.%m.%d')
          
          # Á≥ªÁªü‰ø°ÊÅØ
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          
          # ËÆ°ÁÆóÂπ∂Ë°å‰ªªÂä°Êï∞
          if [ "${{ github.event.inputs.parallel_jobs }}" = "0" ]; then
            JOBS=$((MEM_GB / 2))
            JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
            JOBS=$((JOBS < 1 ? 1 : JOBS))
          else
            JOBS="${{ github.event.inputs.parallel_jobs }}"
          fi
          
          # Ë∞ÉËØïÊ®°Âºè
          if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
            BUILD_FLAGS="V=s"
          else
            BUILD_FLAGS=""
          fi
          
          # ËæìÂá∫ÁéØÂ¢ÉÂèòÈáè
          cat << EOF >> $GITHUB_ENV
          BUILD_VERSION=$VERSION
          BUILD_DATE=$DATE
          BUILD_ID=$BUILD_ID
          FILE_DATE=$FILE_DATE
          TAG_TIME=$TAG_TIME
          PROC_COUNT=$PROC_COUNT
          MEM_GB=$MEM_GB
          COMPILE_JOBS=$JOBS
          BUILD_FLAGS=$BUILD_FLAGS
          EOF
          
          # ËÆæÁΩÆÁºìÂ≠òÈîÆ
          CACHE_KEY="openwrt-${{ env.REPO_BRANCH }}-x86_64-$(date +'%Y%m')"
          echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
          
      - name: üìä Display System Information
        run: |
          cat << EOF
          =====================================
          üìä System Information
          =====================================
          CPU Model: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)
          CPU Cores: ${{ env.PROC_COUNT }}
          Memory: ${{ env.MEM_GB }}GB
          Compile Jobs: ${{ env.COMPILE_JOBS }}
          Kernel: $(uname -r)
          OS: $(lsb_release -ds)
          Build Version: ${{ env.BUILD_VERSION }}
          Build ID: ${{ env.BUILD_ID }}
          =====================================
          EOF
          
      # ============================================
      # 2. Á£ÅÁõòÁ©∫Èó¥‰ºòÂåñ
      # ============================================
      - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk
          
      - name: üíæ Setup Swap & Memory Optimization
        run: |
          # ÂàõÂª∫ swap
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          # ‰ºòÂåñÂÜÖÂ≠òÁÆ°ÁêÜ
          cat << EOF | sudo tee -a /etc/sysctl.conf
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          vm.max_map_count=262144
          EOF
          sudo sysctl -p
          
          echo "Memory status:"
          free -h
      
      # ============================================
      # 3. ‰ª£Á†ÅÊ£ÄÂá∫
      # ============================================
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
              
      # ============================================
      # 4. Â§öÂ±ÇÁºìÂ≠òÁ≠ñÁï•
      # ============================================
      - name: üíæ Cache Dependencies
        uses: actions/cache@v4
        with:
          path: |
            /opt/hostedtoolcache
            ~/.cache/pip
            ~/.npm
          key: deps-${{ runner.os }}-${{ hashFiles('**/package*.json', '**/requirements*.txt') }}
          restore-keys: |
            deps-${{ runner.os }}-
            
      - name: üíæ Cache OpenWrt Source
        id: cache-source
        uses: actions/cache@v4
        with:
          path: openwrt
          key: source-${{ env.CACHE_KEY }}-${{ hashFiles('.github/workflows/*.yml', 'configs/*.config') }}
          restore-keys: |
            source-${{ env.CACHE_KEY }}-
            source-openwrt-${{ env.REPO_BRANCH }}-
            
      - name: üíæ Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.CACHE_KEY }}-${{ hashFiles('configs/*.config') }}
          restore-keys: |
            downloads-${{ env.CACHE_KEY }}-
            downloads-openwrt-${{ env.REPO_BRANCH }}-
            
      - name: üíæ Cache Toolchain
        if: github.event.inputs.use_cache == 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/staging_dir/host
            openwrt/build_dir/host
          key: toolchain-${{ env.CACHE_KEY }}-${{ hashFiles('configs/*.config') }}
          restore-keys: |
            toolchain-${{ env.CACHE_KEY }}-
            toolchain-openwrt-${{ env.REPO_BRANCH }}-
            
      - name: üíæ Cache Build Directory
        if: github.event.inputs.use_cache == 'true'
        uses: actions/cache@v4
        with:
          path: |
            openwrt/build_dir/target-*
            openwrt/.ccache
          key: build-${{ env.CACHE_KEY }}-${{ hashFiles('configs/*.config') }}-${{ github.sha }}
          restore-keys: |
            build-${{ env.CACHE_KEY }}-${{ hashFiles('configs/*.config') }}-
            build-${{ env.CACHE_KEY }}-
            
      # ============================================
      # 5. ÁéØÂ¢ÉÂÆâË£Ö
      # ============================================
      - name: Build System Setup
        uses: sbwml/actions@openwrt-build-setup
            
      - name: üì¶ Install LLVM
        uses: sbwml/actions@install-llvm
        
      # ============================================
      # 6. Ê∫êÁ†ÅÂ§ÑÁêÜ
      # ============================================
      - name: üì• Prepare OpenWrt Source
        run: |
          if [ ! -d "openwrt" ] || [ "${{ github.event.inputs.force_clean }}" = "true" ]; then
            echo "üîÑ Cloning OpenWrt source..."
            rm -rf openwrt
            git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          else
            echo "‚úÖ Using cached OpenWrt source"
            cd openwrt
            git fetch --depth=1 origin $REPO_BRANCH
            git reset --hard FETCH_HEAD
            git clean -fd
          fi
          
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
          COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
          IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          
          cat << EOF >> $GITHUB_ENV
          COMMIT_AUTHOR=$AUTHOR
          COMMIT_DATE=$DATE
          COMMIT_MESSAGE=$MESSAGE
          COMMIT_HASH=$HASH
          EOF
          
      # ============================================
      # 7. Feeds ÈÖçÁΩÆ
      # ============================================
      - name: üìö Configure Feeds
        run: |
          cd $OPENWRT_PATH
          
          # Â§çÂà∂ feeds ÈÖçÁΩÆ
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp ${{ github.workspace }}/feeds.conf.default .
          fi
          
          # Êõ¥Êñ∞ feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      # ============================================
      # 8. Ëá™ÂÆö‰πâÈÖçÁΩÆ
      # ============================================
      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash }}
        run: |
          cd $OPENWRT_PATH
          
          # Â§çÂà∂Ëá™ÂÆö‰πâÊñá‰ª∂
          [ -e ${{ github.workspace }}/files ] && cp -r ${{ github.workspace }}/files .
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp ${{ github.workspace }}/${CONFIG_FILE} .config
          
          # ÊâßË°åËá™ÂÆö‰πâËÑöÊú¨
          chmod +x ${{ github.workspace }}/scripts/*.sh
          chmod +x ${{ github.workspace }}/$DIY_SCRIPT
          
          ${{ github.workspace }}/$DIY_SCRIPT
          ${{ github.workspace }}/scripts/preset-mihimo-core.sh $CLASH_KERNEL
          ${{ github.workspace }}/scripts/preset-adguard-core.sh $CLASH_KERNEL
          
          # ÁîüÊàêÊúÄÁªàÈÖçÁΩÆ
          make defconfig
          
          # ÊèêÂèñËÆæÂ§á‰ø°ÊÅØ
          DEVICE_TARGET=$(grep '^CONFIG_TARGET_BOARD=' .config | cut -d'"' -f2)
          DEVICE_SUBTARGET=$(grep '^CONFIG_TARGET_SUBTARGET=' .config | cut -d'"' -f2)
          
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          
      # ============================================
      # 9. Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩïÔºàÂ¶ÇÊûúÈúÄË¶ÅÔºâ
      # ============================================
      - name: üßπ Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd $OPENWRT_PATH
          echo "üßπ Force cleaning build directory..."
          make dirclean
          make defconfig
          
      # ============================================
      # 10. ‰∏ãËΩΩ‰æùËµñÂåÖ
      # ============================================
      - name: üì• Download Packages
        run: |
          cd $OPENWRT_PATH
          
          echo "üì• Downloading packages..."
          make download -j$((COMPILE_JOBS + 1))
          
          # Ê£ÄÊü•Âπ∂ÈáçËØïÂ§±Ë¥•ÁöÑ‰∏ãËΩΩ
          FAILED_COUNT=$(find dl -size -1024c | wc -l)
          if [ $FAILED_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Found $FAILED_COUNT failed downloads, retrying..."
            find dl -size -1024c -delete
            make download -j1 V=s
          fi
          
          echo "‚úÖ Package download completed"
          
      # ============================================
      # 11. ÁºñËØëÂõ∫‰ª∂
      # ============================================
      - name: üî® Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd $OPENWRT_PATH
          
          # ÂêØÁî® ccache
          export USE_CCACHE=1
          export CCACHE_DIR=$PWD/.ccache
          ccache -M 5G
          ccache -s
          
          echo "üî® Starting compilation with $COMPILE_JOBS jobs..."
          
          # Ê∏êËøõÂºèÁºñËØëÁ≠ñÁï•
          compile_with_jobs() {
            local jobs=$1
            echo "üîß Attempting compilation with $jobs jobs..."
            if make -j$jobs $BUILD_FLAGS; then
              echo "‚úÖ Compilation successful with $jobs jobs"
              return 0
            else
              echo "‚ùå Compilation failed with $jobs jobs"
              return 1
            fi
          }
          
          # Â∞ùËØï‰∏çÂêåÁöÑÂπ∂Ë°åÂ∫¶
          if compile_with_jobs $COMPILE_JOBS; then
            SUCCESS=true
          elif compile_with_jobs $((COMPILE_JOBS/2)); then
            SUCCESS=true
          elif compile_with_jobs 1; then
            SUCCESS=true
          else
            echo "‚ùå All compilation attempts failed"
            
            # ËæìÂá∫ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ
            echo "=== Build log tail ==="
            tail -n 50 build.log 2>/dev/null || echo "No build log found"
            
            echo "=== Failed packages ==="
            find logs -name "*.log" -exec echo "=== {} ===" \; -exec tail -n 20 {} \; 2>/dev/null || true
            
            exit 1
          fi
          
          # ÊòæÁ§∫ ccache ÁªüËÆ°
          ccache -s
          
          echo "status=success" >> $GITHUB_OUTPUT
          
      # ============================================
      # 12. Êï¥ÁêÜÂõ∫‰ª∂Êñá‰ª∂
      # ============================================
      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          
          echo "=== Generated files ==="
          ls -lah
          
          # ÊèêÂèñÂÜÖÊ†∏ÁâàÊú¨
          KERNEL_VERSION=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')
          
          # ‰øùÂ≠òÈÖçÁΩÆÊñá‰ª∂
          cp $OPENWRT_PATH/.config build.config
          
          # ÂéãÁº©ÂÜÖÊ†∏Ê®°Âùó
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # Ê∏ÖÁêÜ‰∏çÂøÖË¶ÅÁöÑÊñá‰ª∂
          rm -f feeds.buildinfo version.buildinfo
          
          # ÁîüÊàêÂõ∫‰ª∂‰ø°ÊÅØÊñá‰ª∂
          cat > firmware_info.json << EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION",
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "ssrp": ${{ github.event.inputs.ssrp }},
              "passwall": ${{ github.event.inputs.passwall }},
              "openclash": ${{ github.event.inputs.openclash }},
              "nikki": ${{ github.event.inputs.nikki }}
            }
          }
          EOF
          
          echo "firmware_path=$PWD" >> $GITHUB_OUTPUT
          echo "kernel_version=$KERNEL_VERSION" >> $GITHUB_OUTPUT
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          
      # ============================================
      # 13. ‰∏ä‰º† Artifacts
      # ============================================
      - name: üì§ Upload Firmware
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
          
      # ============================================
      # 14. ÂàõÂª∫ Release
      # ============================================
      - name: üöÄ Create Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1
        with:
          name: ${{ env.FILE_DATE }}-OpenWrt-${{ env.FIRMWARE_TAG }}
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.BUILD_VERSION }}
          allowUpdates: true
          removeArtifacts: false
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### üìä ÊûÑÂª∫‰ø°ÊÅØ
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |------|------|
            | **ÁâàÊú¨** | `${{ env.BUILD_VERSION }}` |
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á** | `${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏** | `${{ env.KERNEL_VERSION }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **ÂØÜÁ†Å** | `${{ github.event.inputs.root_password }}` |
            
            ### üì¶ ÂåÖÂê´ÁöÑÊèí‰ª∂
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            
            ### üìù Ê∫êÁ†Å‰ø°ÊÅØ
            - **‰ªìÂ∫ì**: [${{ env.REPO_URL }}](${{ env.REPO_URL }})
            - **ÂàÜÊîØ**: `${{ env.REPO_BRANCH }}`
            - **Êèê‰∫§**: `${{ env.COMMIT_HASH }}`
            - **‰ΩúËÄÖ**: ${{ env.COMMIT_AUTHOR }}
            - **Êó∂Èó¥**: ${{ env.COMMIT_DATE }}
            - **Ê∂àÊÅØ**: ${{ env.COMMIT_MESSAGE }}
            
            ### üì• ÂÆâË£ÖËØ¥Êòé
            ```bash
            # Ëß£ÂéãÂõ∫‰ª∂
            gunzip openwrt-*.img.gz
            
            # ÂÜôÂÖ•ËÆæÂ§á
            dd if=openwrt-*.img of=/dev/sdX bs=4M status=progress
