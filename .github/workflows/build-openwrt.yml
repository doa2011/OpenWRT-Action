# Author: P3TERX (Modified and Optimized)
#=================================================
name: üíª Build OpenWrt (x86_64)
permissions:
  contents: write
  actions: read
# ============================================
# Ëß¶ÂèëÊù°‰ª∂
# ============================================
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "üìç ÈªòËÆ§ LAN Âú∞ÂùÄ"
        default: "192.168.1.10"
        required: true
        type: string
      root_password:
        description: "üîë Root ÂØÜÁ†Å"
        default: "password"
        required: false
        type: string
      docker:
        description: "üêã Docker ÊîØÊåÅ"
        type: boolean
        default: true
      passwall:
        description: "üåê Passwall"
        type: boolean
        default: true
      nikki:
        description: "üì¶ Nikki"
        type: boolean
        default: true
      oaf:
        description: "üîí OpenAppFilter"
        type: boolean
        default: false
      use_cache:
        description: "üíæ ‰ΩøÁî®ÁºìÂ≠òÂä†ÈÄü"
        type: boolean
        default: true
      debug_mode:
        description: "üêõ Ë∞ÉËØïÊ®°Âºè"
        type: boolean
        default: false
      parallel_jobs:
        description: "üî¢ Âπ∂Ë°å‰ªªÂä°Êï∞ (0=Ëá™Âä®)"
        type: string
        default: "0"
      force_clean:
        description: "üßπ Âº∫Âà∂Ê∏ÖÁêÜÁºìÂ≠ò"
        type: boolean
        default: false
# ============================================
# ÂÖ®Â±ÄÁéØÂ¢ÉÂèòÈáè
# ============================================
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  UPLOAD_ARTIFACTS: false
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
  DEBIAN_FRONTEND: noninteractive
# ============================================
# Âπ∂ÂèëÊéßÂà∂
# ============================================
concurrency:
  group: build-${{ github.ref }}-${{ github.event.inputs.lan_addr }}
  cancel-in-progress: false
# ============================================
# ‰∏ª‰ªªÂä°
# ============================================
jobs:
  build:
    name: üèóÔ∏è Build OpenWrt
    runs-on: ubuntu-24.04
    timeout-minutes: 720
    
    outputs:
      firmware_path: ${{ steps.organize.outputs.firmware_path }}
      kernel_version: ${{ steps.organize.outputs.kernel_version }}
    
    steps:
      # ============================================
      # 1. ÁéØÂ¢ÉÂàùÂßãÂåñ
      # ============================================
      - name: üîß Setup Environment
        id: env
        run: |
          # Êó∂Âå∫ÂíåGitÈÖçÁΩÆ
          sudo timedatectl set-timezone "$TZ"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # ÊûÑÂª∫‰ø°ÊÅØ
          VERSION=$(date +'%Y.%m.%d')
          DATE=$(date +'%Y-%m-%d %H:%M:%S')
          BUILD_ID="${{ github.run_number }}-${GITHUB_SHA::7}"
          FILE_DATE=$(date +'%Y.%m.%d-%H%M')
          
          # Á≥ªÁªüËµÑÊ∫êËÆ°ÁÆó
          PROC_COUNT=$(nproc)
          MEM_GB=$(($(free -m | awk '/^Mem:/{print $2}') / 1024))
          
          if [ "${{ github.event.inputs.parallel_jobs }}" = "0" ]; then
            JOBS=$((MEM_GB / 2))
            JOBS=$((JOBS > PROC_COUNT ? PROC_COUNT : JOBS))
            JOBS=$((JOBS < 1 ? 1 : JOBS))
          else
            JOBS="${{ github.event.inputs.parallel_jobs }}"
          fi
          
          BUILD_FLAGS=""
          if [[ "${{ github.event.inputs.debug_mode }}" == "true" ]]; then
            BUILD_FLAGS="V=s"
          fi
          
          # ÁºìÂ≠òÈîÆ‰ºòÂåñ
          CONFIG_HASH=$(echo "${{ github.event.inputs.docker }}${{ github.event.inputs.passwall }}${{ github.event.inputs.nikki }}${{ github.event.inputs.oaf }}" | sha256sum | cut -d' ' -f1 | head -c 8)
          WEEK_KEY=$(date +'%Y%U')  # ‰ΩøÁî®Âπ¥+Âë®Êï∞‰Ωú‰∏∫ÁºìÂ≠òÂë®Êúü
          CACHE_KEY="$WEEK_KEY-$CONFIG_HASH"
          
          # ËæìÂá∫ÁéØÂ¢ÉÂèòÈáè
          {
            echo "BUILD_VERSION=$VERSION"
            echo "BUILD_DATE=$DATE"
            echo "BUILD_ID=$BUILD_ID"
            echo "FILE_DATE=$FILE_DATE"
            echo "PROC_COUNT=$PROC_COUNT"
            echo "MEM_GB=$MEM_GB"
            echo "COMPILE_JOBS=$JOBS"
            echo "BUILD_FLAGS=$BUILD_FLAGS"
            echo "CACHE_KEY=$CACHE_KEY"
          } >> $GITHUB_ENV
      - name: üìä Display System Information
        run: |
          echo "=====================================
          üìä System Information
          ====================================="
          echo "CPU: $(lscpu | grep 'Model name' | cut -d':' -f2 | xargs)"
          echo "Cores: $PROC_COUNT | Memory: ${MEM_GB}GB | Jobs: $COMPILE_JOBS"
          echo "OS: $(lsb_release -ds) | Kernel: $(uname -r)"
          echo "Build: $BUILD_VERSION ($BUILD_ID)"
          echo "Cache Key: $CACHE_KEY"
          echo "====================================="
      # ============================================
      # 2. Á≥ªÁªü‰ºòÂåñ
      # ============================================
      - name: üßπ Free Disk Space
        uses: sbwml/actions@free-disk
      - name: üíæ Setup Swap & Memory Optimization
        run: |
          # ÂàõÂª∫Âπ∂ÂêØÁî®swap
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          
          # ÂÜÖÂ≠ò‰ºòÂåñ
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          vm.max_map_count=262144
          EOF
          sudo sysctl -p
          
          echo "Memory status:"
          free -h
      # ============================================
      # 3. ‰ª£Á†ÅÊ£ÄÂá∫
      # ============================================
      - name: ‚úÖ Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      # ============================================
      # 4. ‰ºòÂåñÁöÑÁºìÂ≠òÁ≠ñÁï•ÔºàÂàÜÂ±ÇÁºìÂ≠òÔºâ
      # ============================================
      - name: üíæ Cache Downloads
        if: github.event.inputs.use_cache == 'true'
        id: cache-downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: ${{ github.workflow }}-dl-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ github.workflow }}-dl-
      - name: üíæ Cache Feeds
        if: github.event.inputs.use_cache == 'true'
        id: cache-feeds
        uses: actions/cache@v4
        with:
          path: |
            openwrt/feeds
            openwrt/package/feeds
          key: ${{ github.workflow }}-feeds-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ github.workflow }}-feeds-
      - name: üíæ Cache Toolchain (Minimal)
        if: env.CACHE_TOOLCHAIN == 'true' && github.event.inputs.use_cache == 'true'
        id: cache-toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
          key: ${{ github.workflow }}-tc-${{ env.REPO_BRANCH }}-${{ env.CACHE_KEY }}
          restore-keys: |
            ${{ github.workflow }}-tc-${{ env.REPO_BRANCH }}-
      # ============================================
      # 5. ÁéØÂ¢ÉÂÆâË£Ö
      # ============================================
      - name: üõ†Ô∏è Build System Setup
        uses: sbwml/actions@openwrt-build-setup
      - name: üì¶ Install LLVM
        uses: sbwml/actions@install-llvm
      # ============================================
      # 6. Ê∫êÁ†ÅÂ§ÑÁêÜÔºàÂÆåÂÖ®‰øÆÂ§çÔºâ
      # ============================================
      - name: üì• Prepare OpenWrt Source
        run: |
          # È¶ñÂÖàÈ™åËØÅÂàÜÊîØÊòØÂê¶Â≠òÂú®
          if ! git ls-remote --heads "$REPO_URL" "$REPO_BRANCH" &>/dev/null; then
            echo "‚ùå Branch $REPO_BRANCH not found in $REPO_URL"
            echo "Available branches:"
            git ls-remote --heads "$REPO_URL" | head -10
            exit 1
          fi
    
          # Áî±‰∫é‰∏çÂÜçÁºìÂ≠òÊ∫êÁ†ÅÔºåÁõ¥Êé•ÂÖãÈöÜ
          echo "üîÑ Cloning fresh OpenWrt source..."
          rm -rf openwrt
    
          # ÈáçËØïÊú∫Âà∂
          for attempt in 1 2 3; do
            echo "üì• Clone attempt $attempt/3..."
            if git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt; then
              break
            else
              echo "‚ùå Clone attempt $attempt failed"
              rm -rf openwrt
              if [ $attempt -lt 3 ]; then
                sleep 10
              else
                echo "‚ùå All clone attempts failed"
                exit 1
              fi
            fi
          done
    
          # È™åËØÅÂíåËÆæÁΩÆÁéØÂ¢É
          if [ ! -d "openwrt" ]; then
            echo "‚ùå OpenWrt source directory not found"
            exit 1
          fi
    
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
    
          # Ëé∑ÂèñÊèê‰∫§‰ø°ÊÅØ
          if git log -1 --pretty=format:'%an|%ci|%s|%H' &>/dev/null; then
            COMMIT_INFO=$(git log -1 --pretty=format:'%an|%ci|%s|%H')
            IFS='|' read -r AUTHOR DATE MESSAGE HASH <<< "$COMMIT_INFO"
          else
            AUTHOR="Unknown"
            DATE="Unknown"
            MESSAGE="Unknown"
            HASH="Unknown"
          fi
    
          {
            echo "COMMIT_AUTHOR=${AUTHOR}"
            echo "COMMIT_DATE=${DATE}"
            echo "COMMIT_MESSAGE=${MESSAGE}"
            echo "COMMIT_HASH=${HASH}"
          } >> $GITHUB_ENV
      # ============================================
      # 7. Feeds ÈÖçÁΩÆ
      # ============================================
      - name: üìö Configure Feeds
        run: |
          cd "$OPENWRT_PATH"
          
          # Â§çÂà∂feedsÈÖçÁΩÆ
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
          fi
          
          # Êõ¥Êñ∞ÂíåÂÆâË£Öfeeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # ============================================
      # 8. Ëá™ÂÆö‰πâÈÖçÁΩÆ
      # ============================================
      - name: üé® Apply Custom Configuration
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OAF: ${{ github.event.inputs.oaf }}
        run: |
          cd "$OPENWRT_PATH"
          
          # Â§çÂà∂Ëá™ÂÆö‰πâÊñá‰ª∂
          [ -e "${{ github.workspace }}/files" ] && cp -r "${{ github.workspace }}/files" .
          
          # Â§çÂà∂ÈÖçÁΩÆÊñá‰ª∂
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # ÊâßË°åËá™ÂÆö‰πâËÑöÊú¨
          find "${{ github.workspace }}/scripts" -name "*.sh" -exec chmod +x {} \;
          chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
          
          "${{ github.workspace }}/$DIY_SCRIPT"
          "${{ github.workspace }}/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL"
          "${{ github.workspace }}/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
          
          # OAFÈÖçÁΩÆÂ§ÑÁêÜ
          if [ "$ENABLE_OAF" = "true" ]; then
            echo "üîß Configuring OpenAppFilter..."
            sed -i '/CONFIG_PACKAGE_kmod-oaf/d' .config
            sed -i '/CONFIG_PACKAGE_appfilter/d' .config
            echo "CONFIG_PACKAGE_kmod-oaf=y" >> .config
            echo "CONFIG_PACKAGE_appfilter=y" >> .config
          else
            echo "üö´ Disabling OpenAppFilter..."
            sed -i '/CONFIG_PACKAGE_kmod-oaf/d' .config
            sed -i '/CONFIG_PACKAGE_appfilter/d' .config
            echo "# CONFIG_PACKAGE_kmod-oaf is not set" >> .config
            echo "# CONFIG_PACKAGE_appfilter is not set" >> .config
          fi
          
          # ÁîüÊàêÈÖçÁΩÆ
          make defconfig
          
          # ÊèêÂèñÁõÆÊ†á‰ø°ÊÅØ
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config)
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config)
          
          {
            echo "DEVICE_TARGET=$DEVICE_TARGET"
            echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET"
          } >> $GITHUB_ENV
          # Ëé∑ÂèñÊúÄÊñ∞ÁâàÊú¨
          LATEST_RELEASE=$(curl -s "https://api.github.com/repos/openwrt/openwrt/releases/latest" | grep "tag_name" | head -n 1 | cut -d : -f2 | sed 's/[ \"v,]//g')
          echo "LATEST_RELEASE=${LATEST_RELEASE}" >>$GITHUB_ENV

          echo "üì± Target: $DEVICE_TARGET-$DEVICE_SUBTARGET"
          echo "üìå Latest Release: $LATEST_RELEASE"
      # ============================================
      # 9. Ê∏ÖÁêÜÊûÑÂª∫ÁõÆÂΩï
      # ============================================
      - name: üßπ Clean Build Directory
        if: github.event.inputs.force_clean == 'true'
        run: |
          cd "$OPENWRT_PATH"
          echo "üßπ Force cleaning build directory..."
          make dirclean
          make defconfig
      # ============================================
      # 10. ‰∏ãËΩΩ‰æùËµñÂåÖ
      # ============================================
      - name: üì• Download Packages
        run: |
          cd "$OPENWRT_PATH"
          
          echo "üì• Starting package download..."
          
          # Â§öÁ∫øÁ®ã‰∏ãËΩΩ
          if make download -j$((COMPILE_JOBS + 1)) 2>&1 | tee download.log; then
            echo "‚úÖ Download completed successfully"
          else
            echo "‚ö†Ô∏è Download had issues, cleaning and retrying..."
            find dl -size -1024c -delete 2>/dev/null || true
            
            if make download -j1 2>&1 | tee download_retry.log; then
              echo "‚úÖ Retry download successful"
            else
              echo "‚ùå Download failed, but continuing with compilation..."
              tail -n 20 download_retry.log || true
            fi
          fi
          
          echo "üìä Downloaded packages: $(find dl -type f | wc -l)"
      # ============================================
      # 11. ÁºñËØëÂõ∫‰ª∂
      # ============================================
      - name: üî® Compile Firmware
        id: compile
        timeout-minutes: 600
        run: |
          cd "$OPENWRT_PATH"
          
          # ccacheÈÖçÁΩÆ
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          ccache -M 5G
          ccache -z  # ÈáçÁΩÆÁªüËÆ°
          
          echo "üî® Starting compilation with $COMPILE_JOBS jobs..."
          
          # ÁºñËØëÂáΩÊï∞
          compile_with_jobs() {
            local jobs=$1
            local log_file="compile_j${jobs}.log"
            echo "üîß Compiling with $jobs jobs..."
            
            if timeout 500m make -j"$jobs" $BUILD_FLAGS 2>&1 | tee "$log_file"; then
              echo "‚úÖ Compilation successful with $jobs jobs"
              return 0
            else
              echo "‚ùå Compilation failed with $jobs jobs"
              return 1
            fi
          }
          
          # Ê∏êËøõÂºèÁºñËØëÁ≠ñÁï•
          if compile_with_jobs "$COMPILE_JOBS"; then
            SUCCESS=true
          elif [ "$COMPILE_JOBS" -gt 2 ] && compile_with_jobs $((COMPILE_JOBS/2)); then
            SUCCESS=true
          elif [ "$COMPILE_JOBS" -gt 1 ] && compile_with_jobs 1; then
            SUCCESS=true
          else
            echo "‚ùå All compilation attempts failed"
            
            # ÈîôËØØËØäÊñ≠
            echo "=== Build Error Analysis ==="
            if [ -f "compile_j1.log" ]; then
              echo "Last 100 lines of single-threaded build:"
              tail -n 100 compile_j1.log
            fi
            
            echo "=== Failed Package Logs ==="
            find logs -name "*.log" -newermt "1 hour ago" -exec echo "=== {} ===" \; -exec tail -n 30 {} \; 2>/dev/null | head -500
            
            exit 1
          fi
          
          # ccacheÁªüËÆ°
          echo "=== ccache Statistics ==="
          ccache -s
          
          echo "status=success" >> $GITHUB_OUTPUT
      # ============================================
      # 12. Êï¥ÁêÜÂõ∫‰ª∂Êñá‰ª∂
      # ============================================
      - name: üì¶ Organize Firmware
        if: steps.compile.outputs.status == 'success'
        id: organize
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          
          echo "=== Generated Files ==="
          ls -lah
          
          # ÊèêÂèñÂÜÖÊ†∏ÁâàÊú¨
          KERNEL_VERSION="unknown"
          if [ -f *.manifest ]; then
            KERNEL_VERSION=$(awk '/^kernel/{print $2}' *.manifest | head -1 | sed 's/^[^-]*-//' || echo "unknown")
          fi
          
          # ‰øùÂ≠òÊûÑÂª∫ÈÖçÁΩÆ
          cp "$OPENWRT_PATH/.config" build.config
          
          # Â§ÑÁêÜÂÜÖÊ†∏Ê®°Âùó
          if [ -d packages ]; then
            tar -czf kernel-modules.tar.gz packages/
            rm -rf packages
          fi
          
          # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
          rm -f feeds.buildinfo version.buildinfo
          
          # ÁîüÊàêÂõ∫‰ª∂‰ø°ÊÅØ
          cat > firmware_info.json <<EOF
          {
            "build_date": "$BUILD_DATE",
            "build_version": "$BUILD_VERSION", 
            "build_id": "$BUILD_ID",
            "kernel_version": "$KERNEL_VERSION",
            "target": "$DEVICE_TARGET",
            "subtarget": "$DEVICE_SUBTARGET",
            "lan_address": "${{ github.event.inputs.lan_addr }}",
            "commit_hash": "$COMMIT_HASH",
            "plugins": {
              "docker": ${{ github.event.inputs.docker }},
              "passwall": ${{ github.event.inputs.passwall }},
              "nikki": ${{ github.event.inputs.nikki }},
              "oaf": ${{ github.event.inputs.oaf }}
            }
          }
          EOF
          
          {
            echo "firmware_path=$PWD"
            echo "kernel_version=$KERNEL_VERSION"
          } >> $GITHUB_OUTPUT
          
          {
            echo "KERNEL_VERSION=$KERNEL_VERSION"
            echo "FIRMWARE_PATH=$PWD"
          } >> $GITHUB_ENV
      # ============================================
      # 13. ‰∏ä‰º† Artifacts
      # ============================================
      - name: üì§ Upload Artifacts
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_ARTIFACTS == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: OpenWrt-${{ env.DEVICE_TARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          retention-days: 30
          compression-level: 6
      # ============================================
      # 14. ÂàõÂª∫ Release
      # ============================================
      - name: üöÄ Create Release
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }}-${{ env.FIRMWARE_TAG }}--${{ env.LATEST_RELEASE }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-OpenWrt--${{ env.LATEST_RELEASE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## üéØ OpenWrt Firmware [${{ env.BUILD_ID }}]
            
            ### üìä ÊûÑÂª∫‰ø°ÊÅØ
            | È°πÁõÆ | ‰ø°ÊÅØ |
            |------|------|
            | **ÁâàÊú¨** | `${{ env.LATEST_RELEASE }}` |
            | **Êó•Êúü** | `${{ env.BUILD_DATE }}` |
            | **ÁõÆÊ†á** | `${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}` |
            | **ÂÜÖÊ†∏** | `${{ env.KERNEL_VERSION }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **ÂØÜÁ†Å** | `${{ github.event.inputs.root_password }}` |
            
            ### üì¶ ÂåÖÂê´ÁöÑÊèí‰ª∂
            | Êèí‰ª∂ | Áä∂ÊÄÅ |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '‚úÖ Â∑≤ÂêØÁî®' || '‚ùå Êú™ÂêØÁî®' }} |
            
            ### üìù Ê∫êÁ†Å‰ø°ÊÅØ
            - **‰ªìÂ∫ì**: [${{ env.REPO_URL }}](${{ env.REPO_URL }})
            - **ÂàÜÊîØ**: `${{ env.REPO_BRANCH }}`
            - **Êèê‰∫§**: `${{ env.COMMIT_HASH }}`
            - **‰ΩúËÄÖ**: ${{ env.COMMIT_AUTHOR }}
            - **Êó∂Èó¥**: ${{ env.COMMIT_DATE }}
            - **Ê∂àÊÅØ**: ${{ env.COMMIT_MESSAGE }}
            
            ### üì• ÂÆâË£ÖËØ¥Êòé
            ```bash
            # Ëß£ÂéãÂõ∫‰ª∂
            gunzip openwrt-*.img.gz
            
            # ÂÜôÂÖ•ËÆæÂ§á
            dd if=openwrt-*.img of=/dev/sdX bs=4M status=progress
