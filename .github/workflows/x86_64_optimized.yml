name: 💻 OpenWrt X86_64 Optimized Build
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: '默认 LAN 地址'
        required: true
        default: '192.168.1.10'
        type: string
      root_password:
        description: 'root 密码（默认：password）'
        required: false
        default: 'password'
        type: string
      docker:
        description: '是否编译 Docker'
        type: boolean
        default: true
      ssrp:
        description: '编译 SSR+'
        type: boolean
        default: true
      passwall:
        description: '编译 Passwall'
        type: boolean
        default: true
      nikki:
        description: '编译 Nikki'
        type: boolean
        default: true
      openclash:
        description: '编译 OpenClash'
        type: boolean
        default: true
      lucky:
        description: '编译 Lucky'
        type: boolean
        default: true
      oaf:
        description: '编译 OpenAppFilter'
        type: boolean
        default: true
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 420  # 设置为 7 小时
    steps:
    - name: Set Timezone
      run: |
        sudo timedatectl set-timezone Asia/Shanghai
        git config --global user.name 'actions'
        git config --global user.email 'action@github.com'

    - name: Install Caddy Server
      run: |
        sudo curl -sL -o /usr/bin/caddy https://github.com/grandway2025/Actions-OpenWrt/releases/download/Caddy/caddy
        sudo chmod 755 /usr/bin/caddy
        echo ":8080 {" > caddyfile
        echo "    root * $(pwd)" >> caddyfile
        echo "    file_server browse" >> caddyfile
        echo "}" >> caddyfile
        sudo /usr/bin/caddy start --config caddyfile --adapter caddyfile
        
    - name: Free Disk Space
      uses: sbwml/actions@free-disk
      
    - name: Checkout         
      uses: actions/checkout@v4 
      
    - name: Setup ccache
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ${{ runner.os }}-ccache-${{ github.workflow }}-${{ github.ref }}
        max-size: 10G
        
    - name: Cache Downloads
      uses: actions/cache@v4
      with:
        path: openwrt/dl
        key: dl-${{ runner.os }}-${{ env.REPO_BRANCH }}-${{ hashFiles('feeds.conf.default') }}-${{ hashFiles(env.CONFIG_FILE) }}
        restore-keys: |
          dl-${{ runner.os }}-${{ env.REPO_BRANCH }}-
          dl-${{ runner.os }}-
          
    - name: Cache Toolchain
      uses: actions/cache@v4
      with:
        path: |
          openwrt/staging_dir/host
          openwrt/staging_dir/toolchain-*
        key: toolchain-${{ runner.os }}-${{ env.REPO_BRANCH }}-${{ hashFiles(env.CONFIG_FILE) }}
        restore-keys: |
          toolchain-${{ runner.os }}-${{ env.REPO_BRANCH }}-
          toolchain-${{ runner.os }}-
          
    - name: Clone Source Code
      run: |
        git clone --depth=1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        git log -1 --pretty=format:"COMMIT_AUTHOR=%an%nCOMMIT_DATE=%ci%nCOMMIT_MESSAGE=%s%nCOMMIT_HASH=%H" >> $GITHUB_ENV
        echo "CURRENT_DATE=$(date +%s)" >> $GITHUB_ENV
         
    - name: Install LLVM
      uses: sbwml/actions@install-llvm
      
    - name: Build System Setup
      uses: sbwml/actions@openwrt-build-setup
      
    - name: Install Feeds
      run: |
        cd $OPENWRT_PATH
        curl -o feeds.conf.default https://raw.githubusercontent.com/grandway2025/Actions-OpenWrt/refs/heads/main/Customize/feeds/feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
    - name: Load Custom Configuration
      run: |   
        export LAN=${{ github.event.inputs.lan_addr }}
        export ROOT_PASSWORD=${{ github.event.inputs.root_password }}
        [ ${{ github.event.inputs.docker }} = 'true' ] && export ENABLE_DOCKER=y
        [ ${{ github.event.inputs.ssrp }} = 'true' ] && export ENABLE_SSRP=y
        [ ${{ github.event.inputs.passwall }} = 'true' ] && export ENABLE_PASSWALL=y
        [ ${{ github.event.inputs.nikki }} = 'true' ] && export ENABLE_NIKKI=y
        [ ${{ github.event.inputs.openclash }} = 'true' ] && export ENABLE_OPENCLASH=y
        [ ${{ github.event.inputs.lucky }} = 'true' ] && export ENABLE_LUCKY=y
        [ ${{ github.event.inputs.oaf }} = 'true' ] && export ENABLE_OAF=y
        cd $OPENWRT_PATH
        [ -e ../files ] && mv ../files ./files
        cp ../$CONFIG_FILE .config
        chmod +x $GITHUB_WORKSPACE/scripts/*.sh
        chmod +x $GITHUB_WORKSPACE/$DIY_SCRIPT
        $GITHUB_WORKSPACE/$DIY_SCRIPT
        $GITHUB_WORKSPACE/scripts/preset-mihimo-core.sh $CLASH_KERNEL
        $GITHUB_WORKSPACE/scripts/preset-adguard-core.sh $CLASH_KERNEL
        make defconfig
        echo "SOURCE_REPO=$(basename $REPO_URL)" >> $GITHUB_ENV
        echo "DEVICE_TARGET=$(grep CONFIG_TARGET_BOARD .config | cut -d'\"' -f2)" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$(grep CONFIG_TARGET_SUBTARGET .config | cut -d'\"' -f2)" >> $GITHUB_ENV
        latest_release=$(curl -s https://github.com/openwrt/openwrt/tags | grep -oE 'v[0-9\.]+\-*r*c*[0-9]*.tar.gz' | sed -n '/[2-9][4-9]/p' | sed -n 1p | sed 's/.tar.gz//g' | sed 's/v//g')
        echo "latest_release=${latest_release}" >> $GITHUB_ENV
        
    - name: Compile Firmware
      id: compile
      run: |
        cd $OPENWRT_PATH
        export PATH="/usr/lib/ccache:$PATH"
        echo "Compiling with $(nproc) threads..."
        ccache -s
        make -j$(nproc) || make -j1 || make -j1 V=s
        ccache -s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +'%Y.%m.%d-%H%M')" >> $GITHUB_ENV
        echo "TAG_TIME=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        
    - name: Check Space Usage
      if: success()
      run: df -hT
      
    - name: Organize Firmware Files
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH/bin/targets/*/*
        cp $OPENWRT_PATH/.config build.config
        mkdir -p kernel && mv packages/* kernel
        tar -zcf kernel.tar.gz kernel
        rm -rf packages feeds.buildinfo version.buildinfo kernel
        echo "KERNEL=$(grep ^kernel *.manifest | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
        echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
        
    - name: Upload Bin Directory (Optional)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.OPENWRT_PATH }}/bin
        
    - name: Upload Firmware to Artifact
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE_PATH }}
        
    - name: Upload Firmware to GitHub Release
      if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
      uses: ncipollo/release-action@v1.14.0
      with:
        name: ${{ env.FILE_DATE }}-${{ env.FIRMWARE_TAG }}-${{ env.latest_release }}
        allowUpdates: true
        tag: ${{ env.FIRMWARE_TAG }}-OpenWrt-${{ env.latest_release }}
        token: ${{ secrets.GITHUB_TOKEN }}
        artifacts: ${{ env.FIRMWARE_PATH }}/*
        body: |
          **This is OpenWrt Firmware**
          ### 📒 固件信息
          - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🚀 内核版本: ${{ env.KERNEL }}
          - 🌐 默认地址: ${{ env.IP_ADDR }}
          - 🔑 默认密码: ${{ env.ROOT_PASSWORD }}
          ### 🧊 固件版本
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.COMMIT_AUTHOR }}
          - ${{ env.COMMIT_DATE }}
          - ${{ env.COMMIT_MESSAGE }}
          - ${{ env.COMMIT_HASH }}
