name: 🚀 Build OpenWrt (Optimized Build)
permissions:
  contents: write
  actions: read
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "📍 LAN 地址"
        default: "192.168.1.200"
        required: true
      root_password:
        description: "🔑 Root 密码"
        default: "password"
        required: false
      docker:
        description: "🐋 Docker"
        type: boolean
        default: true
      ssrp:
        description: "🚀 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "🌐 Passwall"
        type: boolean
        default: true
      nikki:
        description: "📦 Nikki"
        type: boolean
        default: true
      openclash:
        description: "⚡ OpenClash"
        type: boolean
        default: true
      lucky:
        description: "🍀 Lucky"
        type: boolean
        default: true
      oaf:
        description: "🛡️ OpenAppFilter"
        type: boolean
        default: true
      force_clean:
        description: "🧹 强制清理缓存"
        type: boolean
        default: false  
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_demo.sh
  FEEDS_CONF: feeds.conf.default
  CLASH_KERNEL: amd64
  UPLOAD_RELEASE: true
  FIRMWARE_TAG: X86_64
  TZ: Asia/Shanghai
concurrency:
  group: openwrt-build-${{ github.ref }}
  cancel-in-progress: true
jobs:
  # ============================================
  # 🔧 工具链预编译 (最优策略)
  # ============================================
  prepare-toolchain:
    name: 🔧 预编译工具链
    runs-on: ubuntu-24.04
    timeout-minutes: 280
    outputs:
      toolchain_ready: ${{ steps.toolchain.outputs.ready }}
    steps: 
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: 💾 Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
      - name: 📥 Prepare OpenWrt Source
        run: |
          git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          # 配置feeds
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
            echo "📄 Using custom feeds.conf.default"
          else
            echo "::warning::feeds.conf.default not found, using upstream defaults."
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: 🎯 智能缓存键生成
        run: |
          # 基于配置文件的稳定缓存键
          CONFIG_HASH=$(sha256sum "${{ github.workspace }}/$CONFIG_FILE" | cut -c1-12)
          MONTH_KEY=$(date +'%Y%m')  # 月度刷新
          CACHE_KEY="${{ env.REPO_BRANCH }}-${CONFIG_HASH}-${MONTH_KEY}"
          
          echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
          echo "📋 缓存策略: $CACHE_KEY"
      - name: ☁️ 工具链缓存
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
            openwrt/staging_dir/host*
          key: toolchain-${{ env.CACHE_KEY }}-v16
          restore-keys: |
            toolchain-${{ env.CACHE_KEY }}-
            toolchain-${{ env.REPO_BRANCH }}-
      - name: 🎨 应用配置
        run: |
          cd "$OPENWRT_PATH"
          
          # 应用配置和脚本
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          make defconfig
      - name: 🔨 编译工具链
        id: toolchain
        run: |
          cd "$OPENWRT_PATH"
          
          echo "🔨 开始工具链编译"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          
          echo "ready=true" >> $GITHUB_OUTPUT
  # ============================================
  # 🏗️ 主编译阶段 (精简优化)
  # ============================================
  build-firmware:
    name: 🏗️ 编译固件
    needs: prepare-toolchain
    if: needs.prepare-toolchain.outputs.toolchain_ready == 'true'
    runs-on: ubuntu-24.04
    timeout-minutes: 200
    steps:
      - name: 🧹 Free Disk Space
        uses: sbwml/actions@free-disk
      - name: 📥 Checkout
        uses: actions/checkout@v4
      - name: 💾 Setup Swap & Memory Optimization
        run: |
          sudo fallocate -l 8G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo tee -a /etc/sysctl.conf >/dev/null <<EOF
          vm.swappiness=10
          vm.vfs_cache_pressure=50
          vm.dirty_ratio=15
          vm.dirty_background_ratio=5
          EOF
          sudo sysctl -p
          echo "Memory status:"
          free -h
      - name: 🛠️ Build System Setup
        uses: sbwml/actions@openwrt-build-setup
      - name: 📦 Install LLVM
        uses: sbwml/actions@install-llvm
      - name: 📥 Prepare OpenWrt Source
        run: |
          git clone --depth=1 "$REPO_URL" -b "$REPO_BRANCH" openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          
          if [ -f "${{ github.workspace }}/feeds.conf.default" ]; then
            cp "${{ github.workspace }}/feeds.conf.default" .
            echo "📄 Using custom feeds.conf.default"
          else
            echo "::warning::feeds.conf.default not found, using upstream defaults."
          fi
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      - name: 🎯 缓存键生成
        run: |
          CONFIG_HASH=$(sha256sum "${{ github.workspace }}/$CONFIG_FILE" | cut -c1-12)
          MONTH_KEY=$(date +'%Y%m')
          CACHE_KEY="${{ env.REPO_BRANCH }}-${CONFIG_HASH}-${MONTH_KEY}"
          echo "CACHE_KEY=$CACHE_KEY" >> $GITHUB_ENV
      - name: ☁️ 多层缓存策略
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/toolchain-*
            openwrt/build_dir/toolchain-*
            openwrt/staging_dir/host*
          key: toolchain-${{ env.CACHE_KEY }}-v16
          restore-keys: |
            toolchain-${{ env.CACHE_KEY }}-
      - name: ☁️ 下载缓存
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: downloads-${{ env.REPO_BRANCH }}-${{ env.CACHE_KEY }}-v8
          restore-keys: |
            downloads-${{ env.REPO_BRANCH }}-
      - name: ☁️ ccache 编译缓存
        uses: actions/cache@v4
        with:
          path: openwrt/.ccache
          key: ccache-${{ env.CACHE_KEY }}-${{ github.run_number }}-v12
          restore-keys: |
            ccache-${{ env.CACHE_KEY }}-
      - name: 🎯 ccache 高性能配置
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          
          mkdir -p "$CCACHE_DIR"
          
          # 高命中率配置
          ccache -M 25G -F 500000
          ccache --set-config=compression=true
          ccache --set-config=compression_level=1
          ccache --set-config=sloppiness=file_macro,locale,time_macros,include_file_ctime,file_stat_matches
          ccache --set-config=direct_mode=true
          ccache --set-config=base_dir="$PWD"
          ccache --cleanup || true
      - name: 🎨 应用配置
        env:
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          ENABLE_DOCKER: ${{ github.event.inputs.docker == 'true' && 'y' || 'n' }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp == 'true' && 'y' || 'n' }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall == 'true' && 'y' || 'n' }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki == 'true' && 'y' || 'n' }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash == 'true' && 'y' || 'n' }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky == 'true' && 'y' || 'n' }}
          ENABLE_OAF: ${{ github.event.inputs.oaf == 'true' && 'y' || 'n' }}
        run: |
          cd "$OPENWRT_PATH"
          
          # 复制自定义文件
          if [ -d "$GITHUB_WORKSPACE/files" ]; then
            mv $GITHUB_WORKSPACE/files $OPENWRT_PATH/files
          fi
          
          # 复制配置文件
          cp "${{ github.workspace }}/$CONFIG_FILE" .config
          
          # 执行自定义脚本
          if [ -d "${{ github.workspace }}/scripts" ]; then
            find "${{ github.workspace }}/scripts" -name "*.sh" -exec chmod +x {} \;
          fi
          if [ -f "${{ github.workspace }}/$DIY_SCRIPT" ]; then
            chmod +x "${{ github.workspace }}/$DIY_SCRIPT"
            "${{ github.workspace }}/$DIY_SCRIPT"
          fi
          "${{ github.workspace }}/scripts/preset-mihimo-core.sh" "$CLASH_KERNEL"
          "${{ github.workspace }}/scripts/preset-adguard-core.sh" "$CLASH_KERNEL"
          
          # 生成配置
          echo "⚙️ Generating defconfig..."
          make defconfig
          
          # 提取目标信息
          DEVICE_TARGET=$(awk -F'"' '/^CONFIG_TARGET_BOARD=/{print $2}' .config)
          DEVICE_SUBTARGET=$(awk -F'"' '/^CONFIG_TARGET_SUBTARGET=/{print $2}' .config)
          echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
      - name: 📥 下载依赖
        run: |
          cd "$OPENWRT_PATH"
          make download -j16
      - name: 🔨 快速编译固件
        timeout-minutes: 180
        run: |
          cd "$OPENWRT_PATH"
          
          export USE_CCACHE=1
          export CCACHE_DIR="$PWD/.ccache"
          export PATH="/usr/lib/ccache:$PATH"
          
          echo "🚀 开始编译 ($(date))"
          
          # 最优分阶段编译策略
          echo "🔨 Stage 1: Target compile"
          make target/compile -j$(nproc) || make target/compile -j1 V=s
          
          echo "🔨 Stage 2: Package compile"
          JOBS=$(($(nproc) < 8 ? $(nproc) : 8))
          make package/compile -j$JOBS || make package/compile -j1 V=s
          
          echo "🔨 Stage 3: Final assembly"
          make package/install target/install package/index -j$(nproc)
          
          echo "✅ 编译完成"
      - name: 📦 整理固件
        run: |
          cd "$OPENWRT_PATH/bin/targets"/*/*
          
          # 提取内核版本
          KERNEL_VERSION=$(grep "^kernel " *.manifest | head -1 | awk '{print $3}' | cut -d- -f1-2 2>/dev/null || echo "unknown")
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          
          # 复制配置文件
          cp "$OPENWRT_PATH/.config" build.config
          
          # 清理文件
          rm -f feeds.buildinfo version.buildinfo *.manifest sha256sums
          
          # 生成固件信息
          cat > firmware_info.txt <<EOF
          OpenWrt 固件信息
          ================
          版本: ${{ env.BUILD_DATE }}
          目标: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
          内核: $KERNEL_VERSION
          编译时间: $(date)
          LAN地址: ${{ github.event.inputs.lan_addr }}
          默认密码: ${{ github.event.inputs.root_password }}
          
          包含插件:
          Docker: ${{ github.event.inputs.docker }}
          SSRP: ${{ github.event.inputs.ssrp }}
          Passwall: ${{ github.event.inputs.passwall }}
          OpenClash: ${{ github.event.inputs.openclash }}
          nikki: ${{ github.event.inputs.nikki }},
          lucky: ${{ github.event.inputs.lucky }},
          oaf: ${{ github.event.inputs.oaf }}          
          EOF
          
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
      - name: 📊 性能报告
        if: always()
        run: |
          cd "$OPENWRT_PATH" 2>/dev/null || cd .
          
          echo "📊 构建性能报告"
          echo "================"
          echo "时间: $(date)"
          echo "分支: ${{ env.REPO_BRANCH }}"
          echo "目标: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}"
          
          if command -v ccache >/dev/null 2>&1; then
            export CCACHE_DIR="$PWD/.ccache"
            echo ""
            echo "🎯 ccache 统计:"
            ccache -s | grep -E "(cache hit|cache miss|hit rate)" || ccache -s
            
            # 计算命中率
            HITS=$(ccache -s | grep "cache hit" | awk '{sum += $4} END {print sum+0}')
            MISSES=$(ccache -s | grep "cache miss" | awk '{print $3}' || echo "1")
            if [ "$MISSES" != "0" ] && [ "$HITS" != "0" ]; then
              HIT_RATE=$(echo "scale=1; $HITS * 100 / ($HITS + $MISSES)" | bc -l 2>/dev/null || echo "N/A")
              echo "📈 命中率: ${HIT_RATE}%"
            fi
          fi
      - name: 🚀 发布固件
        if: env.UPLOAD_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }} • ${{ env.FIRMWARE_TAG }}
          allowUpdates: true
          tag: ${{ env.FIRMWARE_TAG }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            ## 🎯 OpenWrt 固件发布
            
            ### 📊 构建信息
            | 项目 | 信息 |
            |------|------|
            | **版本** | `${{ env.LATEST_RELEASE }}` |
            | **日期** | `${{ env.BUILD_DATE }}` |
            | **目标** | `${{ env.DEVICE_TARGET }}_${{ env.DEVICE_SUBTARGET }}` |
            | **内核** | `${{ steps.organize.outputs.kernel_version }}` |
            | **LAN IP** | `${{ github.event.inputs.lan_addr }}` |
            | **Password** | `${{ github.event.inputs.root_password }}` |
            
            ### 📦 包含的插件
            | 插件 | 状态 |
            |------|------|
            | Docker | ${{ github.event.inputs.docker == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | ShadowSocksR Plus+ | ${{ github.event.inputs.ssrp == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Passwall | ${{ github.event.inputs.passwall == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenClash | ${{ github.event.inputs.openclash == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Nikki | ${{ github.event.inputs.nikki == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | Lucky | ${{ github.event.inputs.lucky == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            | OpenAppFilter | ${{ github.event.inputs.oaf == 'true' && '✅ 已编译' || '❌ 未编译' }} |
            
            ### 📥 安装方法
            
            **UEFI启动 (推荐)**:
            ```bash
            gunzip openwrt-*-generic-ext4-combined-efi.img.gz
            sudo dd if=openwrt-*-generic-ext4-combined-efi.img of=/dev/sdX bs=4M status=progress
