# -------------------------------------------------
# X86_64 OpenWrt 编译工作流（已修正）
# -------------------------------------------------
name: 💻 X86_64_Optimized Build
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "Setting default LAN address"
        required: true
        default: "192.168.1.10"
        type: string
      root_password:
        description: "默认 root 密码（可选，默认 password）"
        required: false
        default: "password"
        type: string
      docker:
        description: "编译 Docker"
        type: boolean
        default: true
      ssrp:
        description: "编译 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "编译 Passwall"
        type: boolean
        default: true
      nikki:
        description: "编译 Nikki"
        type: boolean
        default: true
      openclash:
        description: "编译 OpenClash"
        type: boolean
        default: true
      lucky:
        description: "编译 Lucky"
        type: boolean
        default: true
      oaf:
        description: "编译 OpenAppFilter"
        type: boolean
        default: true
      download_kernel_doc:
        description: "是否下载 kernel‑doc（默认 false）"
        type: boolean
        default: false   # <‑‑ 默认关闭，防止 404
env:
  # ----------------------- 基础信息 -----------------------
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CACHE_VER: v1                     # 改动此值即可强制失效缓存
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64_test.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
  # --------------------- 镜像 & Git 地址 --------------------
  MIRROR: https://mirrors.tuna.tsinghua.edu.cn/openwrt   # 与 diy 脚本保持一致
  GITEA: git.kejizero.online/zhao
  GITHUB: github.com
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 420   # 7 h
    steps:
      # -------------------------------------------------
      # 1️⃣ 基础环境
      # -------------------------------------------------
      - name: Setup environment
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          git config --global user.name actions
          git config --global user.email action@github.com
      - name: Free disk space
        uses: sbwml/actions@free-disk
      # -------------------------------------------------
      # 2️⃣ 代码检出（浅克隆）
      # -------------------------------------------------
      - name: Checkout OpenWrt source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}
          path: openwrt
          fetch-depth: 1      # 只要最新提交
      # -------------------------------------------------
      # 3️⃣ 收集元信息（commit、日期等）
      # -------------------------------------------------
      - name: Export repository meta
        id: meta
        run: |
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git show -s --format='作者: %an')" >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git show -s --format='时间: %ci')"   >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git show -s --format='内容: %s')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse HEAD)"               >> $GITHUB_ENV
          echo "SOURCE_REPO=$(basename ${{ env.REPO_URL }})"     >> $GITHUB_ENV
      # -------------------------------------------------
      # 4️⃣ 缓存：下载文件、toolchain、feeds
      # -------------------------------------------------
      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            dl-${{ runner.os }}-${{ env.CACHE_VER }}-
            dl-${{ runner.os }}-
      - name: Cache Toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host
            openwrt/staging_dir/toolchain-*
          key: toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-
            toolchain-${{ runner.os }}-
      - name: Cache Feeds
        uses: actions/cache@v4
        with:
          path: openwrt/feeds
          key: feeds-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            feeds-${{ runner.os }}-${{ env.CACHE_VER }}-
            feeds-${{ runner.os }}-
      # -------------------------------------------------
      # 5️⃣ ccache
      # -------------------------------------------------
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ runner.os }}-${{ env.CACHE_VER }}
          max-size: 10G
          compress: true
      # -------------------------------------------------
      # 6️⃣ 安装 LLVM（锁定到 14，兼容 OpenWrt 24.10）
      # -------------------------------------------------
      - name: Install LLVM (v14)
        uses: sbwml/actions@install-llvm
        with:
          version: 14
      # -------------------------------------------------
      # 7️⃣ 安装 feeds（使用自定义 feeds.conf）
      # -------------------------------------------------
      - name: Install Feeds
        run: |
          cd $OPENWRT_PATH
          curl -fsSL -o feeds.conf.default \
            https://raw.githubusercontent.com/grandway2025/Actions-OpenWrt/main/Customize/feeds/feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a
      # -------------------------------------------------
      # 8️⃣ 加载自定义配置 + 运行 diy 脚本
      # -------------------------------------------------
      - name: Load Custom Configuration
        env:
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky }}
          ENABLE_OAF: ${{ github.event.inputs.oaf }}
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
          DOWNLOAD_KERNEL_DOC: ${{ github.event.inputs.download_kernel_doc }}   # ← 传递给 diy 脚本
        run: |
          echo "::group::Load custom configuration"
          cd $OPENWRT_PATH
          # 如果仓库根目录有 `files` 目录，把它搬进源码树（兼容旧项目）
          [[ -e ../files ]] && mv ../files ./files
          # 复制基准 .config（相对路径基于仓库根目录）
          cp ../${{ env.CONFIG_FILE }} .config
          # 赋予所有脚本可执行权限
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          chmod +x $GITHUB_WORKSPACE/${{ env.DIY_SCRIPT }}
          # 运行 diy 脚本（已内置对 DOWNLOAD_KERNEL_DOC 的判断）
          $GITHUB_WORKSPACE/${{ env.DIY_SCRIPT }}
          # 继续执行原有的 preset 脚本（保持兼容性）
          $GITHUB_WORKSPACE/scripts/preset-mihimo-core.sh ${{ env.CLASH_KERNEL }}
          $GITHUB_WORKSPACE/scripts/preset-adguard-core.sh ${{ env.CLASH_KERNEL }}
          # 重新生成最終 .config
          make defconfig
          echo "::endgroup::"
          # 导出后续步骤需要的变量
          DEVICE_TARGET=$(grep ^CONFIG_TARGET_BOARD .config | cut -d'"' -f2)
          DEVICE_SUBTARGET=$(grep ^CONFIG_TARGET_SUBTARGET .config | cut -d'"' -f2)
          echo "DEVICE_TARGET=$DEVICE_TARGET"   >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=${{ github.event.inputs.lan_addr }}" >> $GITHUB_ENV
          echo "ROOT_PASSWORD=${{ github.event.inputs.root_password }}" >> $GITHUB_ENV
          # 通过 GitHub API 获取 OpenWrt 官方最新 Release（一次请求）
          latest_release=$(curl -fsSL "https://api.github.com/repos/${{ env.REPO_URL }}/releases/latest" \
            | jq -r .tag_name | sed 's/^v//')
          echo "latest_release=$latest_release" >> $GITHUB_ENV
      # -------------------------------------------------
      # 9️⃣ 分步编译（tools → toolchain → firmware）
      # -------------------------------------------------
      - name: Build tools
        timeout-minutes: 120
        run: |
          echo "::group::Build tools"
          cd $OPENWRT_PATH
          make tools/install -j$(nproc) || make tools/install -j1 V=s
          echo "::endgroup::"
      - name: Build toolchain
        timeout-minutes: 150
        run: |
          echo "::group::Build toolchain"
          cd $OPENWRT_PATH
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          echo "::endgroup::"
      - name: Compile Firmware
        id: compile
        timeout-minutes: 180
        run: |
          echo "::group::Compile firmware"
          cd $OPENWRT_PATH
          export PATH="/usr/lib/ccache:$PATH"
          ccache -s
          make -j$(nproc) || make -j1 V=s
          ccache -s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV
          echo "::endgroup::"
      # -------------------------------------------------
      # 10️⃣ 检查磁盘 & 打包产物
      # -------------------------------------------------
      - name: Check space usage
        if: always()
        run: |
          echo "=== DISK USAGE AFTER COMPILATION ==="
          df -hT
          echo "=== TOP 20 BIGGEST DIRS ==="
          du -sh $OPENWRT_PATH/* 2>/dev/null | sort -h | tail -n 20
      - name: Organise files
        if: steps.compile.outputs.status == 'success'
        run: |
          echo "::group::Organise files"
          cd $OPENWRT_PATH/bin/targets/*/*
          cat sha256sums
          cp $OPENWRT_PATH/.config build.config
          mkdir -p kernel
          mv -f packages/* kernel
          tar -zcf kernel.tar.gz kernel
          rm -rf packages feeds.buildinfo version.buildinfo kernel
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV
          echo "::endgroup::"
      # -------------------------------------------------
      # 11️⃣ 上传制品（可选 Bin 目录、固件）
      # -------------------------------------------------
      - name: Upload Bin Directory (optional)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
      - name: Upload Firmware to Artifact (when not releasing)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
      # -------------------------------------------------
      # 12️⃣ 发布 Release
      # -------------------------------------------------
      - name: Upload Firmware to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }}-${{ env.FIRMWARE_TAG }}-${{ env.latest_release }}
          tag: ${{ env.FIRMWARE_TAG }}-OpenWrt-${{ env.latest_release }}-${{ env.FILE_DATE }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **OpenWrt X86_64 Optimized Firmware**
            ### 📒 基本信息
            - **平台**: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
            - **源码**: ${{ env.REPO_URL }}
            - **分支**: ${{ env.REPO_BRANCH }}
            - **内核版本**: ${{ env.KERNEL }}
            - **默认 LAN**: ${{ env.IP_ADDR }}
            - **默认密码**: ${{ env.ROOT_PASSWORD }}
            - **官方最新 Tag**: ${{ env.latest_release }}
            ### 🧊 编译信息
            - **提交作者**: ${{ env.COMMIT_AUTHOR }}
            - **提交时间**: ${{ env.COMMIT_DATE }}
            - **提交信息**: ${{ env.COMMIT_MESSAGE }}
            - **Commit SHA**: ${{ env.COMMIT_HASH }}
