# .github/workflows/X86_64.yml
# -------------------------------------------------
# 统一版 X86_64 OpenWrt 编译工作流
# -------------------------------------------------
name: 💻 X86_64_Optimized Build
on:
  workflow_dispatch:
    inputs:
      lan_addr:
        description: "Setting default LAN address"
        required: true
        default: "192.168.1.10"
        type: string
      root_password:
        description: "默认 root 密码（可选，默认 password）"
        required: false
        default: "password"
        type: string
      docker:
        description: "编译 Docker"
        type: boolean
        default: true
      ssrp:
        description: "编译 ShadowSocksR Plus+"
        type: boolean
        default: true
      passwall:
        description: "编译 Passwall"
        type: boolean
        default: true
      nikki:
        description: "编译 Nikki"
        type: boolean
        default: true
      openclash:
        description: "编译 OpenClash"
        type: boolean
        default: true
      lucky:
        description: "编译 Lucky"
        type: boolean
        default: true
      oaf:
        description: "编译 OpenAppFilter"
        type: boolean
        default: true
env:
  REPO_URL: https://github.com/openwrt/openwrt
  REPO_BRANCH: openwrt-24.10
  CACHE_VER: v1                # ★ 记得在这里写版本号，变更后会自动失效缓存
  CONFIG_FILE: configs/x86_64.config
  DIY_SCRIPT: scripts/diy-x86_64.sh
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR: false
  FIRMWARE_RELEASE: true
  FIRMWARE_TAG: X86_64
jobs:
  build:
    runs-on: ubuntu-24.04
    timeout-minutes: 420   # 7 h
    steps:
    
      - name: Setup Environment
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          git config --global user.name actions
          git config --global user.email action@github.com
          
      - name: Free Disk Space
        uses: sbwml/actions@free-disk

      - name: Checkout OpenWrt source
        uses: actions/checkout@v4
        with:
          repository: ${{ env.REPO_URL }}
          ref: ${{ env.REPO_BRANCH }}
          path: openwrt
          fetch-depth: 1      # 只要最新提交即可
          
      - name: Export repo meta
        id: meta
        run: |
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "COMMIT_AUTHOR=$(git show -s --format='作者: %an')"    >> $GITHUB_ENV
          echo "COMMIT_DATE=$(git show -s --format='时间: %ci')"    >> $GITHUB_ENV
          echo "COMMIT_MESSAGE=$(git show -s --format='内容: %s')" >> $GITHUB_ENV
          echo "COMMIT_HASH=$(git rev-parse HEAD)"                >> $GITHUB_ENV
          echo "CURRENT_DATE=$(date +%s)"                         >> $GITHUB_ENV
          echo "SOURCE_REPO=$(basename ${{ env.REPO_URL }})"      >> $GITHUB_ENV

      - name: Cache Downloads
        uses: actions/cache@v4
        with:
          path: openwrt/dl
          key: dl-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            dl-${{ runner.os }}-${{ env.CACHE_VER }}-
            dl-${{ runner.os }}-
            
      - name: Cache Toolchain
        uses: actions/cache@v4
        with:
          path: |
            openwrt/staging_dir/host
            openwrt/staging_dir/toolchain-*
          key: toolchain-${{ runner.os }}-${{ env.CACHE_VER }}-${{ env.REPO_BRANCH }}
          restore-keys: |
            toolchain-${{ runner.os }}-${{ env.C_VER }}-
            toolchain-${{ runner.os }}-
            
      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ccache-${{ runner.os }}-${{ env.CACHE_VER }}
          max-size: 10G

      - name: Install LLVM (reuse sbwml action)
        uses: sbwml/actions@install-llvm

      - name: Install Feeds
        run: |
          cd $OPENWRT_PATH
          curl -fsSL -o feeds.conf.default \
            https://raw.githubusercontent.com/grandway2025/Actions-OpenWrt/main/Customize/feeds/feeds.conf.default
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Load Custom Configuration
        env:
          ENABLE_DOCKER: ${{ github.event.inputs.docker }}
          ENABLE_SSRP: ${{ github.event.inputs.ssrp }}
          ENABLE_PASSWALL: ${{ github.event.inputs.passwall }}
          ENABLE_NIKKI: ${{ github.event.inputs.nikki }}
          ENABLE_OPENCLASH: ${{ github.event.inputs.openclash }}
          ENABLE_LUCKY: ${{ github.event.inputs.lucky }}
          ENABLE_OAF: ${{ github.event.inputs.oaf }}
          LAN: ${{ github.event.inputs.lan_addr }}
          ROOT_PASSWORD: ${{ github.event.inputs.root_password }}
        run: |
          set -euo pipefail
          cd $OPENWRT_PATH
          # 把外部目录挂载进源码
          [[ -e ../files ]] && mv ../files ./files
          # 复制基准 config
          cp ../${CONFIG_FILE} .config
          chmod +x $GITHUB_WORKSPACE/scripts/*.sh
          chmod +x $GITHUB_WORKSPACE/${DIY_SCRIPT}
          # 根据输入把额外 config 追加到 .config
          for var in ENABLE_DOCKER ENABLE_SSRP ENABLE_PASSWALL ENABLE_NIKKI ENABLE_OPENCLASH ENABLE_LUCKY ENABLE_OAF; do
            if [[ "${!var}" == "true" ]]; then
              cfg=$(echo "${var}" | cut -d'_' -f2- | tr '[:upper:]' '[:lower:]')
              curl -fsSL "${mirror}/configs/config-${cfg}" >> .config
            fi
          done
          # 运行自定义脚本
          $GITHUB_WORKSPACE/${DIY_SCRIPT}
          $GITHUB_WORKSPACE/scripts/preset-mihimo-core.sh $CLASH_KERNEL
          $GITHUB_WORKSPACE/scripts/preset-adguard-core.sh $CLASH_KERNEL
          # 生成最终 config
          make defconfig
          # 提取目标变量供后面使用
          DEVICE_TARGET=$(grep ^CONFIG_TARGET_BOARD .config | cut -d'"' -f2)
          DEVICE_SUBTARGET=$(grep ^CONFIG_TARGET_SUBTARGET .config | cut -d'"' -f2)
          echo "DEVICE_TARGET=$DEVICE_TARGET"   >> $GITHUB_ENV
          echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
          echo "IP_ADDR=$LAN"               >> $GITHUB_ENV
          echo "ROOT_PASSWORD=$ROOT_PASSWORD" >> $GITHUB_ENV
          # 获取最新 release（使用 API，stable 且一次请求即可）
          latest_release=$(curl -fsSL "https://api.github.com/repos/${{ env.SOURCE_REPO }}/releases/latest" \
            | jq -r .tag_name | sed 's/^v//')
          echo "latest_release=$latest_release" >> $GITHUB_ENV
      # -------------------------------------------------
      # 7️⃣ **分步编译**（Tools → Toolchain → Firmware）
      # -------------------------------------------------
      - name: Build tools
        run: |
          cd $OPENWRT_PATH
          make tools/install -j$(nproc) || make tools/install -j1 V=s
          
      - name: Build toolchain
        run: |
          cd $OPENWRT_PATH
          make toolchain/install -j$(nproc) || make toolchain/install -j1 V=s
          
      - name: Compile Firmware
        id: compile
        run: |
          cd $OPENWRT_PATH
          export PATH="/usr/lib/ccache:$PATH"
          ccache -s
          make -j$(nproc) || make -j1 V=s
          ccache -s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_ENV
          echo "KERNEL=$(cat *.manifest | grep ^kernel | cut -d- -f2 | tr -d ' ')" >> $GITHUB_ENV

      - name: Check Space Usage
        if: always()
        run: df -hT
        
      - name: Organize Files
        if: steps.compile.outputs.status == 'success'
        run: |
          cd $OPENWRT_PATH/bin/targets/*/*
          cat sha256sums
          cp $OPENWRT_PATH/.config build.config
          mkdir -p kernel
          mv -f packages/* kernel
          tar -zcf kernel.tar.gz kernel
          rm -rf packages feeds.buildinfo version.buildinfo kernel
          echo "FIRMWARE_PATH=$PWD" >> $GITHUB_ENV

      - name: Upload Bin Directory (optional)
        if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-bin-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.OPENWRT_PATH }}/bin
          
      - name: Upload Firmware to Artifact (when not releasing)
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.SOURCE_REPO }}-firmware-${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.FILE_DATE }}
          path: ${{ env.FIRMWARE_PATH }}
          
      - name: Upload Firmware to Release
        if: steps.compile.outputs.status == 'success' && env.FIRMWARE_RELEASE == 'true'
        uses: ncipollo/release-action@v1.14.0
        with:
          name: ${{ env.FILE_DATE }}-${{ env.FIRMWARE_TAG }}-${{ env.latest_release }}
          tag: ${{ env.FIRMWARE_TAG }}-OpenWrt-${{ env.latest_release }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
          artifacts: ${{ env.FIRMWARE_PATH }}/*
          body: |
            **This is OpenWrt Firmware**
            ### 📒 固件信息
            - 💻 平台架构: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}
            - ⚽ 固件源码: ${{ env.REPO_URL }}
            - 💝 源码分支: ${{ env.REPO_BRANCH }}
            - 🚀 内核版本: ${{ env.KERNEL }}
            - 🌐 默认地址: ${{ env.IP_ADDR }}
            - 🔑 默认密码: ${{ env.ROOT_PASSWORD }}
            ### 🧊 固件版本
            - 编译前源码最新提交
            - ${{ env.COMMIT_AUTHOR }}
            - ${{ env.COMMIT_DATE }}
            - ${{ env.COMMIT_MESSAGE }}
            - ${{ env.COMMIT_HASH }}
